(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{512:function(v,_,t){"use strict";t.r(_);var e=t(29),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"git-常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-常用命令"}},[v._v("#")]),v._v(" Git 常用命令")]),v._v(" "),t("h2",{attrs:{id:"本地库操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地库操作"}},[v._v("#")]),v._v(" 本地库操作")]),v._v(" "),t("h3",{attrs:{id:"本地库初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地库初始化"}},[v._v("#")]),v._v(" 本地库初始化")]),v._v(" "),t("p",[t("code",[v._v("git init")]),v._v("：初始化一个本地空仓库")]),v._v(" "),t("p",[v._v("初始化操作会生成一个 "),t("code",[v._v(".git")]),v._v(" 目录，存放的是本地库相关的子目录和文件，不要删除和胡乱修改。")]),v._v(" "),t("p",[t("code",[v._v("touch .gitignore")]),v._v("：创建.gitignore 文件")]),v._v(" "),t("h3",{attrs:{id:"设置签名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置签名"}},[v._v("#")]),v._v(" 设置签名")]),v._v(" "),t("p",[v._v("作用：区分不同开发人员的身份")]),v._v(" "),t("p",[v._v("辨析：这里设置的签名和登录远程库（代码托管中心）的账号、密码没有任何关系")]),v._v(" "),t("ul",[t("li",[v._v("项目级别/仓库级别：仅在当前本地库范围有效\n"),t("ul",[t("li",[t("code",[v._v('git config user.name "username"')]),v._v(" ：配置用户名")]),v._v(" "),t("li",[t("code",[v._v('git config user.email "xx@qq.com"')]),v._v("：配置邮箱")]),v._v(" "),t("li",[v._v("信息保存位置 "),t("code",[v._v(".git/config")]),v._v(" 文件")])])]),v._v(" "),t("li",[v._v("系统用户级别：登录当前操作系统的用户范围\n"),t("ul",[t("li",[t("code",[v._v('git config --global user.name "username"')]),v._v(" ：配置用户名")]),v._v(" "),t("li",[t("code",[v._v('git config --global user.email "xx@qq.com"')]),v._v("：配置邮箱")]),v._v(" "),t("li",[v._v("信息保存位置 "),t("code",[v._v("~/.gitconfig")]),v._v(" 文件")])])])]),v._v(" "),t("p",[v._v("级别优先级：")]),v._v(" "),t("ul",[t("li",[v._v("就近原则：项目级别优先于系统用户级别，二者都存在时，采用项目级别的签名")]),v._v(" "),t("li",[v._v("如果只有系统用户级别的签名，就以系统用户级别的签名为准")]),v._v(" "),t("li",[v._v("二者都没有，则不允许")])]),v._v(" "),t("h3",{attrs:{id:"基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[v._v("#")]),v._v(" 基本操作")]),v._v(" "),t("h4",{attrs:{id:"查看状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看状态"}},[v._v("#")]),v._v(" 查看状态")]),v._v(" "),t("p",[t("code",[v._v("git status")]),v._v("：查看工作区和暂存区中代码或文件的状态：红色（当前处于工作区，还没有提交到暂存区）、绿色（当前处于暂存区，还没有提交到历史区），如果没有文件，代表三个区域代码已同步")]),v._v(" "),t("h4",{attrs:{id:"添加操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加操作"}},[v._v("#")]),v._v(" 添加操作")]),v._v(" "),t("p",[t("code",[v._v("git add <file>")]),v._v("：把当前工作区中的某个新建/修改文件的操作提交到暂存区")]),v._v(" "),t("p",[t("code",[v._v("git add .")]),v._v(" / "),t("code",[v._v("git add -A")]),v._v("：把当前工作区中所有最新修改文件的操作都提交到暂存区")]),v._v(" "),t("h4",{attrs:{id:"提交操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提交操作"}},[v._v("#")]),v._v(" 提交操作")]),v._v(" "),t("p",[t("code",[v._v("git commit <file>")]),v._v(" ：将暂存区的某个文件的操作提交到历史区（省略文件名表示将暂存区所有文件的操作提交到历史区）")]),v._v(" "),t("ul",[t("li",[v._v("按 "),t("code",[v._v("i")]),v._v(" 键从一般模式进入编辑模式")]),v._v(" "),t("li",[v._v("输入提交信息")]),v._v(" "),t("li",[v._v("按 "),t("code",[v._v("ESC")]),v._v(" 键再 "),t("code",[v._v(":wq")]),v._v(" 写入退出")])]),v._v(" "),t("p",[t("code",[v._v("git commit -m“日志信息“ <file>")]),v._v("：将暂存区的某个文件的操作提交到历史区（省略文件名表示将暂存区所有文件的操作提交到历史区）")]),v._v(" "),t("h4",{attrs:{id:"查看版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看版本"}},[v._v("#")]),v._v(" 查看版本")]),v._v(" "),t("p",[t("code",[v._v("git log")]),v._v("：查看当前历史区提交的记录")]),v._v(" "),t("p",[t("code",[v._v("git log --pretty=oneline")]),v._v("：每次提交记录以一行的简洁形式显示")]),v._v(" "),t("p",[t("code",[v._v("git log --oneline")]),v._v("：每次提交记录以一行显示，并且索引值也以简洁形式显示")]),v._v(" "),t("p",[t("code",[v._v("git reflog")]),v._v("：查看当前历史区提交的记录，并且显示回退到某个版本需要的步数")]),v._v(" "),t("p",[v._v("多屏显示控制方式：")]),v._v(" "),t("ul",[t("li",[v._v("空格向下翻页")]),v._v(" "),t("li",[t("code",[v._v("b")]),v._v("向上翻页")]),v._v(" "),t("li",[t("code",[v._v("q")]),v._v(" 退出")])]),v._v(" "),t("h4",{attrs:{id:"前进后退"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前进后退"}},[v._v("#")]),v._v(" 前进后退")]),v._v(" "),t("ul",[t("li",[v._v("基于索引值操作：可进可退\n"),t("ul",[t("li",[t("code",[v._v("git reset --hard <局部索引值>")])])])]),v._v(" "),t("li",[v._v("使用 "),t("code",[v._v("^")]),v._v(" 符号：只能往后退\n"),t("ul",[t("li",[t("code",[v._v("git reset --hard^")]),v._v("：后退一个版本（一个 "),t("code",[v._v("^")]),v._v(" 表示后退一步， n 个表示后退 n 步）")])])]),v._v(" "),t("li",[v._v("使用 "),t("code",[v._v("~")]),v._v(" 符号：只能后退\n"),t("ul",[t("li",[t("code",[v._v("git reset --hard~n")]),v._v("：后退 n 个版本")])])])]),v._v(" "),t("p",[t("code",[v._v("reset")]),v._v(" 命令的三个参数对比：")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("--soft")]),v._v("（仅历史区前进后退）\n"),t("ul",[t("li",[v._v("仅仅在本地库移动 "),t("code",[v._v("HEAD")]),v._v(" 指针")])])]),v._v(" "),t("li",[t("code",[v._v("--mixed")]),v._v("（暂存区和历史区同时前进后退）\n"),t("ul",[t("li",[v._v("在本地库移动 "),t("code",[v._v("HEAD")]),v._v(" 指针")]),v._v(" "),t("li",[v._v("重置暂存区")])])]),v._v(" "),t("li",[t("code",[v._v("--hard")]),v._v("（三区同时前进后退）\n"),t("ul",[t("li",[v._v("在本地库移动 "),t("code",[v._v("HEAD")]),v._v(" 指针")]),v._v(" "),t("li",[v._v("重置暂存区")]),v._v(" "),t("li",[v._v("重置工作区")])])])]),v._v(" "),t("h4",{attrs:{id:"删除文件找回"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除文件找回"}},[v._v("#")]),v._v(" 删除文件找回")]),v._v(" "),t("p",[v._v("前提：删除前，文件存在时的状态提交到了本地库")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("添加到历史区的删除文件找回")]),v._v(" "),t("p",[t("code",[v._v("git reset --hard <局部索引值>")]),v._v("：三区同步回退到文件删除前的版本")])]),v._v(" "),t("li",[t("p",[v._v("添加到暂存区的删除文件找回")]),v._v(" "),t("p",[t("code",[v._v("git reset --hard HEAD")]),v._v("：工作区和历史区回退到本地库所在指针的版本")])])]),v._v(" "),t("h4",{attrs:{id:"比较文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较文件"}},[v._v("#")]),v._v(" 比较文件")]),v._v(" "),t("p",[t("code",[v._v("git diff <file>")]),v._v("：将工作区中的文件和暂存区进行比较")]),v._v(" "),t("p",[t("code",[v._v("git diff HEAD <file>")]),v._v("：工作区 VS 历史区所在指针的版本进行比较")]),v._v(" "),t("p",[t("code",[v._v("git diff master")]),v._v("：工作区 VS 历史区")]),v._v(" "),t("p",[t("code",[v._v("git diff --cached")]),v._v("：暂存区 VS 历史区")]),v._v(" "),t("p",[v._v("注意：不带文件名比较多个文件")]),v._v(" "),t("p",[t("code",[v._v("git rm --cached <file>")]),v._v("：将某个新增文件的操作从暂存区删除")]),v._v(" "),t("h3",{attrs:{id:"分支管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[v._v("#")]),v._v(" 分支管理")]),v._v(" "),t("h4",{attrs:{id:"什么是分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是分支"}},[v._v("#")]),v._v(" 什么是分支")]),v._v(" "),t("p",[v._v("在版本控制过程中，使用多条线同时推进多个任务。")]),v._v(" "),t("p",[t("img",{attrs:{src:"img/git-branch.png",alt:"git-branch"}})]),v._v(" "),t("h4",{attrs:{id:"分支的好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支的好处"}},[v._v("#")]),v._v(" 分支的好处")]),v._v(" "),t("ul",[t("li",[v._v("同时并行推进多个功能开发，提高开发效率")]),v._v(" "),t("li",[v._v("各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响，失败的分支删除重新开始即可")])]),v._v(" "),t("h4",{attrs:{id:"分支操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[v._v("#")]),v._v(" 分支操作")]),v._v(" "),t("p",[t("code",[v._v("git branch <分支>")]),v._v("：创建分支")]),v._v(" "),t("p",[t("code",[v._v("git branch -v")]),v._v("：查看分支")]),v._v(" "),t("p",[t("code",[v._v("git checkout <分支>")]),v._v("：切换分支")]),v._v(" "),t("p",[t("code",[v._v("git merge <分支>")]),v._v("：将某个分支合并到当前所在分支（需要先切换到接收合并的分支上）")]),v._v(" "),t("p",[v._v("合并冲突的表现：")]),v._v(" "),t("p",[t("img",{attrs:{src:"img/git-branch-merge-conflict.png",alt:"git-branch-merge-conflict"}})]),v._v(" "),t("p",[v._v("合并冲突的解决：")]),v._v(" "),t("ul",[t("li",[v._v("编辑文件，删除特殊符号")]),v._v(" "),t("li",[v._v("把文件修改到满意的程度")]),v._v(" "),t("li",[t("code",[v._v("git add <file>")])]),v._v(" "),t("li",[t("code",[v._v('git commit -m"日志信息"')]),v._v(" ，此时不能带具体文件名")])]),v._v(" "),t("p",[t("code",[v._v("git checkout -- <file>")]),v._v(" ：撤销文件修改")]),v._v(" "),t("h2",{attrs:{id:"远程库操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#远程库操作"}},[v._v("#")]),v._v(" 远程库操作")]),v._v(" "),t("h3",{attrs:{id:"关联远程库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关联远程库"}},[v._v("#")]),v._v(" 关联远程库")]),v._v(" "),t("p",[t("code",[v._v("git remote -v")]),v._v("：查看本地库和远程库的所有关联信息")]),v._v(" "),t("p",[t("code",[v._v("git remote add [远程库地址别名] [远程库git地址]")]),v._v("：在本地创建远程库别名 "),t("code",[v._v("origin")]),v._v(" ，并且关联到远程库")]),v._v(" "),t("p",[t("code",[v._v("git remote remove [远程库地址别名]")]),v._v("：使用别名移除本地库与远程库的关联")]),v._v(" "),t("h3",{attrs:{id:"推送远程库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推送远程库"}},[v._v("#")]),v._v(" 推送远程库")]),v._v(" "),t("p",[t("code",[v._v("git push [远程库地址别名] [远程分支名]")]),v._v("：把自己本地库信息推送到远程库的分支下")]),v._v(" "),t("h3",{attrs:{id:"克隆远程库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#克隆远程库"}},[v._v("#")]),v._v(" 克隆远程库")]),v._v(" "),t("p",[t("code",[v._v("git clone [远程库git地址]")]),v._v("：将远程库克隆下载到本地")]),v._v(" "),t("ul",[t("li",[v._v("完整地把远程库下载到本地")]),v._v(" "),t("li",[v._v("创建 "),t("code",[v._v("origin")]),v._v(" 远程地址别名")]),v._v(" "),t("li",[v._v("初始化本地库")])]),v._v(" "),t("h3",{attrs:{id:"邀请成员"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#邀请成员"}},[v._v("#")]),v._v(" 邀请成员")]),v._v(" "),t("p",[v._v("邀请者：在 GitHub 的仓库中，依次点击 Setting -> Collaborators -> 添加邀请成员的 GitHub 账户 -> 复制邀请链接发送给被邀请成员")]),v._v(" "),t("p",[v._v("被邀请者：登录自己的 GitHub 账户，访问邀请链接接受邀请即可")]),v._v(" "),t("h3",{attrs:{id:"拉取远程库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拉取远程库"}},[v._v("#")]),v._v(" 拉取远程库")]),v._v(" "),t("p",[t("code",[v._v("pull")]),v._v(" = "),t("code",[v._v("fetch")]),v._v(" + "),t("code",[v._v("merge")])]),v._v(" "),t("p",[t("code",[v._v("git fetch [远程库地址别名] [远程库分支名]")]),v._v("：将远程库分支的信息拉取到本地库")]),v._v(" "),t("p",[t("code",[v._v("git merge [远程库地址别名] [远程库分支名]")]),v._v("：将拉取到本地的远程库分支信息与本地库合并")]),v._v(" "),t("p",[t("code",[v._v("git pull [远程库地址别名] [远程库分支名]")]),v._v("：将远程库分支的信息拉取并合并到本地库")]),v._v(" "),t("h3",{attrs:{id:"解决冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突"}},[v._v("#")]),v._v(" 解决冲突")]),v._v(" "),t("p",[v._v("如果不是基于 GitHub 远程库的最新版所做的修改，不能推送，必须先拉取。拉取下来后如果进入冲突状态，则按照“分支冲突”操作解决即可。")]),v._v(" "),t("h3",{attrs:{id:"跨团队协作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨团队协作"}},[v._v("#")]),v._v(" 跨团队协作")]),v._v(" "),t("ul",[t("li",[v._v("先将别人远程库中的项目 "),t("code",[v._v("Fork")]),v._v(" 到自己的远程库中")]),v._v(" "),t("li",[v._v("然后将自己远程库中的项目 "),t("code",[v._v("clone")]),v._v(" 到自己的本地库中")]),v._v(" "),t("li",[v._v("在本地修改项目之后，推送到自己的远程库中")]),v._v(" "),t("li",[v._v("在自己远程库中，依次点击 Pull request -> New pull request -> Creat pull request 提交到别人远程库中")]),v._v(" "),t("li",[v._v("别人在远程库中查看提交的信息，如果没有问题，点击 Merge pull request -> 填写本次操作的日志信息 -> Confirm merge 将提交的信息合并到项目中")])]),v._v(" "),t("h2",{attrs:{id:"git-工作流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-工作流"}},[v._v("#")]),v._v(" Git 工作流")]),v._v(" "),t("p",[t("img",{attrs:{src:"img/git-flow.png",alt:"git-flow"}})]),v._v(" "),t("h2",{attrs:{id:"参考目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考目录"}},[v._v("#")]),v._v(" 参考目录")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV1pW411A7a5?from=search&seid=1877068505047673521",target:"_blank",rel:"noopener noreferrer"}},[v._v("尚硅谷 Git 教程"),t("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=a.exports}}]);